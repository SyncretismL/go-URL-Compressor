// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: sub.proto

package compressor_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CompressedURLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullURL string `protobuf:"bytes,1,opt,name=fullURL,proto3" json:"fullURL,omitempty"`
}

func (x *CompressedURLRequest) Reset() {
	*x = CompressedURLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sub_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompressedURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompressedURLRequest) ProtoMessage() {}

func (x *CompressedURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sub_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompressedURLRequest.ProtoReflect.Descriptor instead.
func (*CompressedURLRequest) Descriptor() ([]byte, []int) {
	return file_sub_proto_rawDescGZIP(), []int{0}
}

func (x *CompressedURLRequest) GetFullURL() string {
	if x != nil {
		return x.FullURL
	}
	return ""
}

type CompressedURLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompressedURL string `protobuf:"bytes,1,opt,name=CompressedURL,proto3" json:"CompressedURL,omitempty"`
}

func (x *CompressedURLResponse) Reset() {
	*x = CompressedURLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sub_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompressedURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompressedURLResponse) ProtoMessage() {}

func (x *CompressedURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sub_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompressedURLResponse.ProtoReflect.Descriptor instead.
func (*CompressedURLResponse) Descriptor() ([]byte, []int) {
	return file_sub_proto_rawDescGZIP(), []int{1}
}

func (x *CompressedURLResponse) GetCompressedURL() string {
	if x != nil {
		return x.CompressedURL
	}
	return ""
}

type FullURLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompressedURL string `protobuf:"bytes,1,opt,name=CompressedURL,proto3" json:"CompressedURL,omitempty"`
}

func (x *FullURLRequest) Reset() {
	*x = FullURLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sub_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullURLRequest) ProtoMessage() {}

func (x *FullURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sub_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullURLRequest.ProtoReflect.Descriptor instead.
func (*FullURLRequest) Descriptor() ([]byte, []int) {
	return file_sub_proto_rawDescGZIP(), []int{2}
}

func (x *FullURLRequest) GetCompressedURL() string {
	if x != nil {
		return x.CompressedURL
	}
	return ""
}

type FullURLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullURL string `protobuf:"bytes,1,opt,name=fullURL,proto3" json:"fullURL,omitempty"`
}

func (x *FullURLResponse) Reset() {
	*x = FullURLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sub_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullURLResponse) ProtoMessage() {}

func (x *FullURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sub_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullURLResponse.ProtoReflect.Descriptor instead.
func (*FullURLResponse) Descriptor() ([]byte, []int) {
	return file_sub_proto_rawDescGZIP(), []int{3}
}

func (x *FullURLResponse) GetFullURL() string {
	if x != nil {
		return x.FullURL
	}
	return ""
}

var File_sub_proto protoreflect.FileDescriptor

var file_sub_proto_rawDesc = []byte{
	0x0a, 0x09, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x22, 0x30, 0x0a, 0x14,
	0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x75, 0x6c, 0x6c, 0x55, 0x52, 0x4c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x75, 0x6c, 0x6c, 0x55, 0x52, 0x4c, 0x22, 0x3d,
	0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x55, 0x52, 0x4c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x55, 0x52, 0x4c, 0x22, 0x36, 0x0a,
	0x0e, 0x46, 0x75, 0x6c, 0x6c, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x55, 0x52, 0x4c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x55, 0x52, 0x4c, 0x22, 0x2b, 0x0a, 0x0f, 0x46, 0x75, 0x6c, 0x6c, 0x55, 0x52, 0x4c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x75, 0x6c, 0x6c,
	0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x75, 0x6c, 0x6c, 0x55,
	0x52, 0x4c, 0x32, 0xb7, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x48, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x75, 0x6c, 0x6c,
	0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x75, 0x6c,
	0x6c, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1a, 0x5a, 0x18,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sub_proto_rawDescOnce sync.Once
	file_sub_proto_rawDescData = file_sub_proto_rawDesc
)

func file_sub_proto_rawDescGZIP() []byte {
	file_sub_proto_rawDescOnce.Do(func() {
		file_sub_proto_rawDescData = protoimpl.X.CompressGZIP(file_sub_proto_rawDescData)
	})
	return file_sub_proto_rawDescData
}

var file_sub_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_sub_proto_goTypes = []interface{}{
	(*CompressedURLRequest)(nil),  // 0: compressor_grpc.CompressedURLRequest
	(*CompressedURLResponse)(nil), // 1: compressor_grpc.CompressedURLResponse
	(*FullURLRequest)(nil),        // 2: compressor_grpc.FullURLRequest
	(*FullURLResponse)(nil),       // 3: compressor_grpc.FullURLResponse
}
var file_sub_proto_depIdxs = []int32{
	0, // 0: compressor_grpc.CompressingService.Create:input_type -> compressor_grpc.CompressedURLRequest
	2, // 1: compressor_grpc.CompressingService.Get:input_type -> compressor_grpc.FullURLRequest
	1, // 2: compressor_grpc.CompressingService.Create:output_type -> compressor_grpc.CompressedURLResponse
	3, // 3: compressor_grpc.CompressingService.Get:output_type -> compressor_grpc.FullURLResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_sub_proto_init() }
func file_sub_proto_init() {
	if File_sub_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sub_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompressedURLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sub_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompressedURLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sub_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullURLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sub_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullURLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sub_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sub_proto_goTypes,
		DependencyIndexes: file_sub_proto_depIdxs,
		MessageInfos:      file_sub_proto_msgTypes,
	}.Build()
	File_sub_proto = out.File
	file_sub_proto_rawDesc = nil
	file_sub_proto_goTypes = nil
	file_sub_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CompressingServiceClient is the client API for CompressingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CompressingServiceClient interface {
	Create(ctx context.Context, in *CompressedURLRequest, opts ...grpc.CallOption) (*CompressedURLResponse, error)
	Get(ctx context.Context, in *FullURLRequest, opts ...grpc.CallOption) (*FullURLResponse, error)
}

type compressingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompressingServiceClient(cc grpc.ClientConnInterface) CompressingServiceClient {
	return &compressingServiceClient{cc}
}

func (c *compressingServiceClient) Create(ctx context.Context, in *CompressedURLRequest, opts ...grpc.CallOption) (*CompressedURLResponse, error) {
	out := new(CompressedURLResponse)
	err := c.cc.Invoke(ctx, "/compressor_grpc.CompressingService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compressingServiceClient) Get(ctx context.Context, in *FullURLRequest, opts ...grpc.CallOption) (*FullURLResponse, error) {
	out := new(FullURLResponse)
	err := c.cc.Invoke(ctx, "/compressor_grpc.CompressingService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompressingServiceServer is the server API for CompressingService service.
type CompressingServiceServer interface {
	Create(context.Context, *CompressedURLRequest) (*CompressedURLResponse, error)
	Get(context.Context, *FullURLRequest) (*FullURLResponse, error)
}

// UnimplementedCompressingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCompressingServiceServer struct {
}

func (*UnimplementedCompressingServiceServer) Create(context.Context, *CompressedURLRequest) (*CompressedURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedCompressingServiceServer) Get(context.Context, *FullURLRequest) (*FullURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterCompressingServiceServer(s *grpc.Server, srv CompressingServiceServer) {
	s.RegisterService(&_CompressingService_serviceDesc, srv)
}

func _CompressingService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompressedURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompressingServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compressor_grpc.CompressingService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompressingServiceServer).Create(ctx, req.(*CompressedURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompressingService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FullURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompressingServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compressor_grpc.CompressingService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompressingServiceServer).Get(ctx, req.(*FullURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CompressingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "compressor_grpc.CompressingService",
	HandlerType: (*CompressingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CompressingService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CompressingService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sub.proto",
}
